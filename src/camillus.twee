:: StoryTitle
Camillus


:: StoryData
{
	"ifid": "74F33364-4C2C-4376-AF7D-AB4A12489121",
	"format": "SugarCube",
	"format-version": "2.36.1",
	"start": "Start Screen",
	"zoom": 1
}


:: Story Stylesheet [stylesheet]
@import url(https://cdn.jsdelivr.net/gh/dreampulse/computer-modern-web-font@master/fonts.css);

html {
  height: 100%;
  box-sizing: border-box;
}

body {  
  background-color: black;
  color: darkgrey;
  font-family: "Computer Modern Concrete", Helvetica, sans-serif;
  font-size: 16px;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
  margin: 0px;
  padding: 0px;
  min-height: 100%;
  
}

a {
  text-decoration: none;
  color: gold;
}

a:hover {
  text-decoration: none;
  color: grey;
}

img {
  max-width: 100%;
  -webkit-user-drag: none;
  -khtml-user-drag: none;
  -moz-user-drag: none;
  -o-user-drag: none;
  user-drag: none;
}

input[type=text] {
  min-width: 2px;
  max-width: 80%;
  margin-top: 5px;
}

input {
  border: 1px solid gold;
}

button {
  background-color: yellow;
  color: black;
  border: none;
  width: 100%;
}

#story {
  border: 1px solid gold;
  min-height: 100%;
  background-color: black;
}

.passage {
  display: flex;
  line-height: 1.5;
  align-items: stretch;
  transition: 0s;
  transition-delay: 0s; 
}

#passage-confessional {
  transition: 0s;
  transition-delay: 1.75s; 
}

.hide {
  visibility: hidden;
}

.imgbox {
  max-width: 200px;
  display: flex;
  margin: 30px 20px 30px 70px;
}

#textbox {
  width: 300px;
  height: 465px;
  overflow: auto;
  margin: 20px 0px 20px 50px;
  padding: 0px 2em;
  min-width: 200px;
  border: 1px solid gold;
  display: flex;
  flex-direction: column-reverse;
  flex: auto;
}

.startbox {
  width: 300px;
  margin: 20px 20px 20px 50px;
  padding: 0px 2em;
  min-width: 200px;
  background-color: black;
  display: flex;
  justify-content: center;
  align-items: stretch;
  border: 1px solid gold;
}

.startbox button {
  color: yellow;
  background-color: black;
  width: 100%;
  length: 100%;
}

.startbox button:hover {
  background-color: black;
  color: grey;
}

*::-webkit-scrollbar {
  width: 5px;
}
*::-webkit-scrollbar-track {
  background: black;
}
*::-webkit-scrollbar-thumb {
  background: black;
}
*::-webkit-scrollbar-thumb:hover {
  background: gold;
}

.preload {
  height: 1px;
  width: 1px;
  z-index: -1;
}

.buttons {
  display:flex;
  align-items:flex-start;
  flex-direction: column-reverse;
  margin-right:-20px;
  margin-bottom:50px;
  gap: 0px;
  padding: 0px;
  /* z-index: 1; */
  /* position: absolute; */
}

body[data-tags~=menu] {
	/* background-color: gold; */
}

.back {
    display: none;
}

/* start volume slider */
input[type=range]#volume-control {
  width: 100%;
  margin: 6.1px 0;
  background-color: transparent;
  -webkit-appearance: none;
}
input[type=range]#volume-control:focus {
  outline: none;
}
input[type=range]#volume-control::-webkit-slider-runnable-track {
  background: #ffd700;
  border: 0;
  border-radius: 25px;
  width: 100%;
  height: 3.8px;
  cursor: pointer;
}
input[type=range]#volume-control::-webkit-slider-thumb {
  margin-top: -6.1px;
  width: 16px;
  height: 16px;
  background: #ffd700;
  border: 1px solid rgba(0, 0, 0, 0);
  border-radius: 50px;
  cursor: pointer;
  -webkit-appearance: none;
}
input[type=range]#volume-control:focus::-webkit-slider-runnable-track {
  background: #ffe13d;
}
input[type=range]#volume-control::-moz-range-track {
  background: #ffd700;
  border: 0;
  border-radius: 25px;
  width: 100%;
  height: 3.8px;
  cursor: pointer;
}
input[type=range]#volume-control::-moz-range-thumb {
  width: 16px;
  height: 16px;
  background: #ffd700;
  border: 1px solid rgba(0, 0, 0, 0);
  border-radius: 50px;
  cursor: pointer;
}
input[type=range]#volume-control::-ms-track {
  background: transparent;
  border-color: transparent;
  border-width: 6.1px 0;
  color: transparent;
  width: 100%;
  height: 3.8px;
  cursor: pointer;
}
input[type=range]#volume-control::-ms-fill-lower {
  background: #c2a300;
  border: 0;
  border-radius: 50px;
}
input[type=range]#volume-control::-ms-fill-upper {
  background: #ffd700;
  border: 0;
  border-radius: 50px;
}
input[type=range]#volume-control::-ms-thumb {
  width: 16px;
  height: 16px;
  background: #ffd700;
  border: 1px solid rgba(0, 0, 0, 0);
  border-radius: 50px;
  cursor: pointer;
  margin-top: 0px;
  /*Needed to keep the Edge thumb centred*/
}
input[type=range]#volume-control:focus::-ms-fill-lower {
  background: #ffd700;
}
input[type=range]#volume-control:focus::-ms-fill-upper {
  background: #ffe13d;
}
/*TODO: Use one of the selectors from https://stackoverflow.com/a/20541859/7077589 and figure out
how to remove the virtical space around the range input in IE*/
@supports (-ms-ime-align:auto) {
  /* Pre-Chromium Edge only styles, selector taken from hhttps://stackoverflow.com/a/32202953/7077589 */
  input[type=range]#volume-control {
    margin: 0;
    /*Edge starts the margin from the thumb, not the track as other browsers do*/
  }
}
/* end volume slider */

@media screen and (max-width: 700px) {
  body {
    font-size: 12px;
  }

  #passages {
    max-width: 100%;
    height: 100vh;
    width: 100vw;
    margin: 0px;
    padding: 0px;
  }
  .passage {
    height: 100vh;
    width: 100vw;
    margin: 0px;
    padding: 0px;
    flex-direction: column;
    align-items: center;
    justify-content: flex-end;
  }
  .imgbox {
    margin: 0px 20px 0px 20px;
  }
  #textbox {
    overflow: auto;
    margin: 0px 0px 0px 0px;
    min-height: 25vh;
    width: 100px;
    padding: 0px 20px;
    border: 1px solid gold;
  }
  #story {
    width: 100vw;
    height: 100vh;
    margin: 0px;
    padding: 0px;
    border: none;
    display: flex;
    justify-content: center;
    align-items: flex-start;
  }

  img {
    width: 90px;
  }

  .buttons {
    position: relative;
    display:flex;
    flex-direction: row-reverse;
    margin:20px 0px 0px 0px;
    width: 100%;
    gap: 10px;
    max-width: 250px;
  }

  .continue {
    flex: 1;
  }

  .back {
    flex: 1;
  }

  *::-webkit-scrollbar-thumb {
    background: yellow;
  }

  .startbox{
    width: inherit;
    margin: 20px;
    margin: 0px 0px 0px 0px;
    height: 200px;
    overflow: auto;
    width: 100px;
    padding: 0px 20px;
    border: 1px solid gold;
  }
}

@keyframes shakeit {
  0% { transform: translate(2px, 1px) rotate(0deg); }
	10% { transform: translate(-1px, -2px) rotate(-1deg); }
	20% { transform: translate(-3px, 0px) rotate(1deg); }
	30% { transform: translate(0px, 2px) rotate(0deg); }
	40% { transform: translate(1px, -1px) rotate(1deg); }
	50% { transform: translate(-1px, 2px) rotate(-1deg); }
	60% { transform: translate(-3px, 1px) rotate(0deg); }
	70% { transform: translate(2px, 1px) rotate(-1deg); }
	80% { transform: translate(-1px, -1px) rotate(1deg); }
	90% { transform: translate(2px, 2px) rotate(0deg); }
	100% { transform: translate(1px, -2px) rotate(-1deg); }
}

@-o-keyframes shakeit {
	0% { -o-transform: translate(2px, 1px) rotate(0deg); }
	10% { -o-transform: translate(-1px, -2px) rotate(-1deg); }
	20% { -o-transform: translate(-3px, 0px) rotate(1deg); }
	30% { -o-transform: translate(0px, 2px) rotate(0deg); }
	40% { -o-transform: translate(1px, -1px) rotate(1deg); }
	50% { -o-transform: translate(-1px, 2px) rotate(-1deg); }
	60% { -o-transform: translate(-3px, 1px) rotate(0deg); }
	70% { -o-transform: translate(2px, 1px) rotate(-1deg); }
	80% { -o-transform: translate(-1px, -1px) rotate(1deg); }
	90% { -o-transform: translate(2px, 2px) rotate(0deg); }
	100% { -o-transform: translate(1px, -2px) rotate(-1deg); }
}

@-webkit-keyframes shakeit {
	0% { -webkit-transform: translate(2px, 1px) rotate(0deg); }
	10% { -webkit-transform: translate(-1px, -2px) rotate(-1deg); }
	20% { -webkit-transform: translate(-3px, 0px) rotate(1deg); }
	30% { -webkit-transform: translate(0px, 2px) rotate(0deg); }
	40% { -webkit-transform: translate(1px, -1px) rotate(1deg); }
	50% { -webkit-transform: translate(-1px, 2px) rotate(-1deg); }
	60% { -webkit-transform: translate(-3px, 1px) rotate(0deg); }
	70% { -webkit-transform: translate(2px, 1px) rotate(-1deg); }
	80% { -webkit-transform: translate(-1px, -1px) rotate(1deg); }
	90% { -webkit-transform: translate(2px, 2px) rotate(0deg); }
	100% { -webkit-transform: translate(1px, -2px) rotate(-1deg); }
}

@-moz-keyframes shakeit {
	0% { -moz-transform: translate(2px, 1px) rotate(0deg); }
	10% { -moz-transform: translate(-1px, -2px) rotate(-1deg); }
	20% { -moz-transform: translate(-3px, 0px) rotate(1deg); }
	30% { -moz-transform: translate(0px, 2px) rotate(0deg); }
	40% { -moz-transform: translate(1px, -1px) rotate(1deg); }
	50% { -moz-transform: translate(-1px, 2px) rotate(-1deg); }
	60% { -moz-transform: translate(-3px, 1px) rotate(0deg); }
	70% { -moz-transform: translate(2px, 1px) rotate(-1deg); }
	80% { -moz-transform: translate(-1px, -1px) rotate(1deg); }
	90% { -moz-transform: translate(2px, 2px) rotate(0deg); }
	100% { -moz-transform: translate(1px, -2px) rotate(-1deg); }
}

.shake {
	-webkit-animation-name: shakeit;
	-webkit-animation-duration: 0.8s;
	-webkit-transform-origin:50% 50%;
	-webkit-animation-iteration-count: infinite;
	-webkit-animation-timing-function: linear;
  -moz-animation-name: shakeit;
	-moz-animation-duration: 0.8s;
	-moz-transform-origin:50% 50%;
	-moz-animation-iteration-count: infinite;
	-moz-animation-timing-function: linear;
  -o-animation-name: shakeit;
	-o-animation-duration: 0.8s;
	-o-transform-origin:50% 50%;
	-o-animation-iteration-count: infinite;
	-o-animation-timing-function: linear;
  animation-name: shakeit;
	animation-duration: 0.8s;
	transform-origin:50% 50%;
	animation-iteration-count: infinite;
	animation-timing-function: linear;
}
.shake{
	display:inline-block
}

:: Story JavaScript [script]
(function () {
    // disable.js, by chapel, for sugarcube 2
    // v1.0.0

    'use strict';

    var cls = 'disabled';
    var interactive = ['button', 'fieldset', 'input', 'menuitem', 'optgroup', 'option', 'select', 'textarea'];

    function getEl (self) {
        // get the first interactive element
        var $el = $(self).find(interactive.join(',')).first();
        if (!$el[0]) {
            $el = $(self).children().eq(0);
            if (!$el[0]) {
                return $(self);
            }
        }
        return $el;
    }

    function changeCls ($el) {
        if ($el.ariaIsDisabled()) {
            $el.addClass(cls);
        } else {
            $el.removeClass(cls);
        }
    }

    function disable ($el, bool) {
        if (!($el instanceof $)) {
            $el = $($el);
        }
        $el.ariaDisabled((bool === undefined) ? true : !!bool);
        changeCls($el);
        return $el;
    }

    // no need for JS API as there us a built-in jQuery extension

    Macro.add('disable', {
        tags : null,
        handler : function () {
            var bool, $wrapper = $(document.createElement('span'))
                .addClass('macro-' + this.name)
                .wiki(this.payload[0].contents);

            try {
                bool = this.args.raw.trim() ? !!Scripting.evalJavaScript(this.args.full) : undefined;
            } catch (err) {
                return this.error("bad evaluation: " + err.message);
            }

            disable(getEl($wrapper), bool);

            // output
            $(this.output).append($wrapper);
        }
    });

}());

// volume slider, by chapel; for sugarcube 2
// version 1.1.0

/*
    Changelog:
    v1.1.1:
      - Removed compatiblity to make it clear what should be updated
      - fixed not saving to API
    v1.1.0:
      - Fixed compatiblity issues with SugarCube version 2.28 (still compatible with older versions, too).
      - Added settings API integration for SugarCube 2.26.
      - Internal improvements and greater style consistency with my other work.
      - Added a pre-minified version.
      - By default, the slider is now more granual than before (101 possible positions vs 11).
        Change the `current` and `rangemax` options to 10 to restore the old feel.
*/

(function () {
    Setting.addRange('volume', {
        label : 'Volume: ',
        min : 0,
        max : 100,
        step : 1,
        default : 50,
        onInit : updateVolume,
        onChange : updateVolume
    });

	// Function to update the volume level.
	function setVolume (val) {
		if (typeof val !== 'number') val = Number(val);
		if (Number.isNaN(val) || val < 0) val = 0.5;
		if (val > 1) val = 1;
		settings.volume = val * 100;
		Setting.save();

		if ($("input[name='volume']").val() != settings.volume) {
			$("input[name='volume']").val(settings.volume);
		}
		try {
			if (SimpleAudio) {
				if (typeof SimpleAudio.volume === 'function') {
					SimpleAudio.volume(val);
				} else {
					SimpleAudio.volume = val;
				}
				return val;
			} else {
				throw new Error('Cannot access audio API.');
			}
		} catch (err) {
			// Fall back to the wikifier if we have to.
			console.error(err.message, err);
			$.wiki('<<masteraudio volume ' + val + '>>');
			return val;
		}
	}

	// Grab volume level changes from the volume slider.
	$(document).on('input', "input[name='volume']", function() {
		var change = parseInt($("input[name='volume']").val());
		setVolume(change / 100);
	});

	// Create the <<volume>> macro.
	Macro.add('volume', {
		handler : function () {
			var wrapper = $(document.createElement('span'));
			var slider = $(document.createElement('input'));
			var className = 'macro-' + this.name;
			slider.attr({
				id		: 'volume-control',
				type	: 'range',
				name	: 'volume',
				min		: 0,
				max		: 100,
				step	: 1,
				value	: settings.volume
			});
			// Class '.macro-volume' and ID '#volume-control' for styling the slider
			wrapper.append(slider).addClass(className).appendTo(this.output);
		}
	});

	function updateVolume () {
		setVolume(settings.volume / 100);
	}

	
}());

// message macro, by chapel (with help from T.M. Edwards); for sugarcube 2
// version 1.0.1
// see the documentation: https://github.com/ChapelR/custom-macros-for-sugarcube-2#message-macro
$(document.head).append('<link rel="icon" href="https://64.media.tumblr.com/3c0c138ba2fbf2345c5178ffd049b79b/97ea9b2179b365ad-c4/s100x200/3448a77b72a70db117a08c4ad6fd133363073cd1.png">');

//intialize namespace
setup.messageMacro = {};

// default text option:
setup.messageMacro.default = 'Help';

// <<message>> macro
Macro.add('message', {
    tags    : null,
    handler : function () {
        var message  = this.payload[0].contents;
        var $wrapper = $(document.createElement('span'));
        var $link    = $(document.createElement(this.args.includes('btn') ? 'button' : 'a'));
        var $content = $(document.createElement('span'));

        $link
            .wiki(this.args.length > 0 && this.args[0] !== 'btn' ? this.args[0] : setup.messageMacro.default)
            .ariaClick( this.createShadowWrapper( function () {
                if ($wrapper.hasClass('open')) {
                    $content
                        .css('display', 'none')
                        .empty();
                }
                else {
                    $content
                        .css('display', 'block')
                        .wiki(message);
                }

                $wrapper.toggleClass('open');
            }));

        $wrapper
            .attr('id', 'macro-' + this.name + '-' + this.args.join('').replace(/[^A-Za-z0-9]/g, ''))
            .addClass('message-text')
            .append($link)
            .append($content)
            .appendTo(this.output);
    }
});

UIBar.destroy();

// document.body.classList.add('js-loading');
// window.addEventListener("load", showPage, false);
// function showPage() {
//   document.body.classList.remove('js-loading');
// }


:: StoryInit
{
  <<cacheaudio "bell" "audio/bell.wav">>
  <<cacheaudio "rain" "audio/rain.wav">>
  <<cacheaudio "church" "audio/church-ambience.wav">>
  <<cacheaudio "door" "audio/door.wav">>
  <<cacheaudio "clicking" "audio/click.wav">>
  <<audio church loop volume 0.25 play>>
  <<audio rain loop volume 0.10 play>>
}

:: StoryMenu
{
  <div class="preload">
    <img src="./images/window.png">
  </div>
}

:: PassageHeader
/* Navigation noises */
<<on 'click' 'button'>>
  <<audio clicking volume 0.1 play>>
<</on>>

/* Keyboard navigation */
<<on 'keyup'>><<which 13>><<trigger 'click' '.continue button'>><</on>>
<<on 'keyup'>><<which 32>><<trigger 'click' '.continue button'>><</on>>
<<on 'keyup'>><<which 39>><<trigger 'click' '.continue button'>><</on>>
<<on 'keyup'>><<which 37>><<trigger 'click' '.back button'>><</on>>

/* Forward button navigation */
<<on 'click' '.continue button'>>
  <<if _ctp.log.index gt 0>>
    <<if $('.back').is(":hidden")>>
      <<run $(".back").css("display", "block")>>
    <</if>>
  <</if>>
<</on>>
/* Backwards button navigation */
<<on 'click' '.back button'>>
  <<if _ctp.log.index is 0>>
    <<if $('.back').is(":visible")>>
      <<run $(".back").css("display", "none")>>
    <</if>>
  <</if>>
<</on>>


:: Start Screen [menu] {"position":"100,0"}
<<audio church loop volume 0.25 play>>
<<audio rain loop volume 0.10 play>>
<div class="imgbox"><img src="images/window.png"></div>
<div class="startbox">
  <button data-passage="Confessional">Start
  </button>
</div>


:: Confessional {"position":"225,0"}
/* left image display */ /* <<live '<img @src=$img>'>> */ /* Alternative way of setting images */
<div class="imgbox"> <<crossfadecontainer "windowbox" $img>> </div>
<div id="textbox"> /* right textbox display */
/* Initial variables */
<<silently>>
  /* Starting audio */
  <<audio church fadeoverto 1 0>>
  <<audio rain fadeoverto 1 0>>
  <<audio door play>>
  /* Starting variables */
  <<set $section to "section1">> /* Sets the starting pasage */
  <<set $img to "images/window.png">>
  <<set $input to false>> /* Allows input in textboxes */
<</silently>>

  /* section 1 */
  <<ctp "section1">>
    /* Set the ctp to the section to access index attribute */
    <<liveblock>><<set _ctp to CTP.getCTP($section)>><</liveblock>>

    /* Checks if textbox input prompt can be disabled */
    <<ctpHead>>
      <<if _ctp.log.index gt 7>>
          <<set $input to true>><<update>> 
      <</if>>

    /* Example lines */
    /* <<set $img to "images/window.png">><<update>> */ /* Alternative way to set images */
    <<ctpNext t8n>>
      Line with scroll-up transition.
    <<ctpNext>>
      Line without scroll-up transition.
    <<ctpNext t8n>>
      <<crossfade "windowbox" "images/test.png">>Advancing to this line changes the image.
    <<ctpNext t8n>>
      <<crossfade "windowbox" "images/window.png">>Advancing to this line changes the image again. Going back will not revert the image.
    <<ctpNext t8n clear>>
      Clear (undoable).
    <<ctpNext t8n nobr>>
      Same line if short.
    <<ctpNext t8n 1s>>
      Delayed response.
    <<ctpNext t8n>>
      <div class="shake">Shaking text.</div>
    <<ctpNext t8n>>
      /* Creating and disabling textboxes */
      <<liveblock>> <<disable $input>><<textbox "$name" "">><</disable>><</liveblock>>
    <<ctpNext t8n>>
      /* Handling inputs from textboxes */
      <<if $name.length is 0>>
        Response if no input.
      <<else>>
        <<set $name to $name.toUpperFirst()>>
        Response if there is an input.
        Inputted value in correct format: $name
      <</if>>
    <<ctpNext t8n>>
      /* Manual passage navigation still possible */
      [[Start Screen]]     
    <<ctpNext t8n>>
       /* Required empty ending passage to move to next section */

    /* Checks when to change sections */
    <<ctpTail>> 
      <<if _ctp.log.index is _ctp.stack.length - 1>>
        <<run _ctp.goTo(0);>>
        <<set $section to "section2">><<update>>
      <</if>>
  <</ctp>>

  <<ctp "section2">>
    <<set _ctp to CTP.getCTP($section)>><<update>>
    <<ctpNext t8n>>
      <<script>>
        var element = document.getElementById("textbox");
        element.scrollTop = -2000;
      <</script>>
      This is a new section. (not undoable)
  <</ctp>>

</div>

:: PassageFooter 
<div class="buttons"><div class="continue" ><<button ">>">><<ctpAdvance $section>><</button>></div><div class="back"><<button "<<">><<ctpBack $section>><</button>></div></div>
/* <<volume>> */

:: Untitled Passage {"position":"400,100"}
<<message>>Text<</message>>
// creates a link that reads 'Help' (by default) and can be clicked to display the content between the tags and clicked again to collapse the content.

<<message 'click me' btn>>Text<</message>>
// creates the message with the link text 'click me' and renders it as a button element

<<message 'Click here!' 'uniqueID'>>...<</message>>
<<message 'Click here!' 'anotherUniqueID'>>...<</message>>
// creates two messages with the same link text.  they must be given two different, unique IDs to appear in the same passage

<<linkreplace "You'll //never// take me alive!" t8n>>On second thought, don't hurt me.<</linkreplace>>

I spy with my little <<linkappend "eye" t8n>>, a crab rangoon<</linkappend>>.

I <<linkprepend "like" t8n>>do not <</linkprepend>> lemons.

<<timed 2s>>Hi! Ho!
<<next>>Hi! Ho!
<<next>>It's off to work we go!
<</timed>>
[[Confessional]]

